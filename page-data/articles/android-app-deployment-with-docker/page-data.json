{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/android-app-deployment-with-docker/","result":{"data":{"allMarkdownRemark":{"totalCount":3},"markdownRemark":{"id":"86177ae5-dd45-5b91-99b8-123f13823ce6","html":"<p>In the world of mobile app development, deploying Android applications to the Google Play Store involves numerous dependencies and configurations. However, with the Android Docker Image for Building and Deploying Apps to the Google Play Store, this process is streamlined. By integrating the Android SDK and Fastlane into a Docker container, developers can easily incorporate the deployment process into their Continuous Integration/Continuous Deployment (CI/CD) pipelines. Let’s explore how to use this Docker image to simplify the deployment process.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*kShKmYh0Br09F68LdhZSHg.png\" alt=\"\"></p>\n<h2>Introduction</h2>\n<p>Deploying an Android application to the Google Play Store usually requires a series of complex steps involving the setup of the Android SDK, generation of signed APKs, and submission to the Play Store. These tasks can be repetitive and time-consuming, especially when integrated into a CI/CD pipeline. To alleviate this, a Docker image has been developed, encompassing all necessary tools, such as the Android SDK and Fastlane, to streamline the deployment process.</p>\n<h2>Using the Android Docker Image</h2>\n<h2>1. Pull the Docker Image:</h2>\n<p>First, you need to pull the Docker image:</p>\n<pre><code>docker pull mohamedhelmy/android-docker:34\n</code></pre>\n<h2>Build Your Android App:</h2>\n<p>Use the following command to build your Android app within the Docker container:</p>\n<pre><code>docker run -v /path/to/your/android/app:/root/app mohamedhelmy/android-docker:34 fastlane build\n</code></pre>\n<p>This command builds your Android app within the Docker container, ensuring that all necessary dependencies are included in the build process.</p>\n<h2>3. Deploy Your Android App to the Google Play Store:</h2>\n<p>After building your app, you can deploy it to the Google Play Store using the following command:</p>\n<pre><code>docker run -v /path/to/your/android/app:/root/app mohamedhelmy/android-docker:34 fastlane deploy\n</code></pre>\n<p>This command deploys your Android app to the Google Play Store. All you need to provide is the path to your Android app.</p>\n<h2>Dockerfile:</h2>\n<p>The Dockerfile used to build the Docker image is as follows:</p>\n<pre><code>FROM ubuntu:20.04\n\nMAINTAINER Mohamed Helmy &#x3C;helmy419@gmail.com>\n\n# Environment variables\nENV LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US \\\n    LC_ALL=en_US.UTF-8 \\\n    DEBIAN_FRONTEND=noninteractive \\\n    ANDROID_HOME=/opt/android-sdk-linux \\\n    ANDROID_SDK_HOME=/opt/android-sdk-linux \\\n    ANDROID_SDK_ROOT=/opt/android-sdk-linux \\\n    ANDROID_SDK=/opt/android-sdk-linux \\\n    PATH=\"${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/34.0.0:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/emulator:${ANDROID_HOME}/bin\"\n\n# Update and install dependencies\nRUN dpkg --add-architecture i386 \\\n    &#x26;&#x26; apt-get update -yqq \\\n    &#x26;&#x26; apt-get install -y curl expect git libc6:i386 libgcc1:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 openjdk-17-jdk wget unzip vim \\\n    &#x26;&#x26; apt-get clean \\\n    &#x26;&#x26; groupadd android \\\n    &#x26;&#x26; useradd -d /opt/android-sdk-linux -g android android\n\n# Copy tools and licenses\nCOPY tools /opt/tools\nCOPY licenses /opt/licenses\n\n# Set work directory\nWORKDIR /opt/android-sdk-linux\n\n# Run entrypoint\nRUN /opt/tools/entrypoint.sh built-in\n\n# Install Android SDK components\nRUN /opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager \"cmdline-tools;latest\" \\\n    &#x26;&#x26; /opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager \"build-tools;34.0.0\" \\\n    &#x26;&#x26; /opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager \"platform-tools\" \\\n    &#x26;&#x26; /opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager \"platforms;android-34\" \\\n    &#x26;&#x26; /opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager \"system-images;android-34;google_apis;x86_64\"\n\n# Install FastLane dependencies\nRUN apt install ruby-full build-essential -y \\\n    &#x26;&#x26; gem install fastlane -NV \\\n    &#x26;&#x26; fastlane --version\n\n# Clean up\nRUN apt-get autoremove -y \\\n    &#x26;&#x26; apt-get clean\n\n# Default command\nCMD [\"/opt/tools/entrypoint.sh\", \"built-in\"]\n</code></pre>\n<h2>Example Fastfile:</h2>\n<p>Here’s an example Fastfile you can use in your Android project:</p>\n<pre><code>default_platform(:android)\n\nplatform :android do\n  lane :build do\n    # Your build steps here\n    gradle(\n      task: \"assemble\",\n      build_type: \"Release\"\n    )\n  end\n\n  lane :deploy do\n    # Your deployment steps here\n    supply(\n      track: 'internal',\n      apk: 'app/build/outputs/apk/release/app-release.apk'\n    )\n  end\nend\n</code></pre>\n<h2>Example .gitlab-ci.yml:</h2>\n<p>To integrate this Docker image into your GitLab CI/CD pipeline, you can use the following .gitlab-ci.yml file:</p>\n<pre><code>image: mohamedhelmy/android-docker:34\n\nstages:\n  - build\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - fastlane build\n\ndeploy:\n  stage: deploy\n  script:\n    - fastlane deploy\n</code></pre>\n<h2>Example of Using This Image in a CI/CD Pipeline (GitHub Actions):</h2>\n<p>Below is an example GitHub Actions workflow for integrating this Docker image into your CI/CD pipeline:</p>\n<pre><code>name: Android CI/CD\n\non: [push]\n\njobs:\n  build:\n    name: Build and Deploy\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Pull Docker Image\n      run: docker pull mohamedhelmy/android-docker:34\n\n    - name: Run Docker Container\n      run: docker run -v ${{ github.workspace }}:/workspace mohamedhelmy/android-docker:34\n\n    - name: Build Android App\n      run: |\n        cd /workspace\n        fastlane build\n\n    - name: Deploy Android App to Google Play Store\n      run: |\n        cd /workspace\n        fastlane deploy\n</code></pre>\n<p>With this Docker image, building and deploying Android applications to the Google Play Store has never been easier. Developers can now seamlessly integrate this process into their CI/CD pipelines, enhancing efficiency and ensuring a smooth deployment process.</p>\n<h2>Conclusion</h2>\n<p>The Android Docker Image for Building and Deploying Apps to the Google Play Store simplifies and streamlines the process of deploying Android applications. By integrating the Android SDK and Fastlane into a Docker container, developers can now build and deploy Android apps to the Google Play Store seamlessly. This Docker image enables easy integration into Continuous Integration/Continuous Deployment (CI/CD) pipelines, saving time and effort. Streamline your Android app deployment process today with this efficient Docker image.</p>\n<h2>GitHub Repository</h2>\n<p>To access and utilize this Docker image, you can visit the <a href=\"https://github.com/mohamed-helmy/android-docker\">GitHub repository</a>.</p>\n<p>Feel free to contribute, report issues, or provide feedback to improve the Android Docker image</p>","frontmatter":{"title":"Streamlining Android App Deployment with Docker and Fastlane","date":"April 24, 2024"}}},"pageContext":{"slug":"/articles/android-app-deployment-with-docker/","previous":{"fields":{"slug":"/articles/emuhub-android/"},"frontmatter":{"title":"EmuHub: Simplify Android App Testing with Multiple Emulators"}},"next":null}},"staticQueryHashes":["1185972000","4096889267","904649186"],"slicesMap":{}}